// This file is auto-generated by a CLI tool
// Ask @mattpocock about it

import { useMachine } from '@xstate/react';
import {
  StateMachine,
  AnyEventObject,
  EventObject,
  State,
  Interpreter,
  {{#if actionLines}}
  ActionObject,
  ActionFunction,
  {{/if}}
  {{#if activities}}
  ActivityConfig,
  {{/if}}
  {{#if services}}
  InvokeCreator,
  {{/if}}
} from 'xstate';

export type {{ capitalize id }}StateMatches =
  {{#if stateMatches}}
  {{#each stateMatches}}
  | '{{this}}'
  {{/each}}
  {{else}}
  never;
  {{/if}}

export interface {{ capitalize id }}Options<Context = any, Event extends EventObject = AnyEventObject> {
  context?: Partial<Context>;
  {{#if condLines}}
  guards: {
    {{#each condLines}}
    {{this.name}}: (
      context: Context,
        {{#if this.events}}
      event:
        Extract<Event,
        {{#each this.events}}
        | { type: '{{this}}' }
        {{/each}}
        >
        {{/if}}
      ) => boolean;
    {{/each}}
  };
  {{/if}}
  {{#if actionLines}}
  actions: {
    {{#each actionLines}}
    {{this.name}}:
      | ActionObject<
          Context,
          {{#if this.events}}
          Extract<Event,
          {{#each this.events}}
          | { type: '{{this}}' }
          {{/each}}
          >
          {{else}}
          Event
          {{/if}}
        >
      | ActionFunction<
          Context,
          {{#if this.events}}
          Extract<Event,
          {{#each this.events}}
          | { type: '{{this}}' }
          {{/each}}
          >
          {{else}}
          Event
          {{/if}}
        >;
    {{/each}}
  };
  {{/if}}
  {{#if services}}
  services: {
    {{#each services}}
    {{this.name}}: InvokeCreator<
      Context, 
      {{#if this.events}}
      Extract<Event,
      {{#each this.events}}
      | { type: '{{this}}' }
      {{/each}}
      >
      {{else}}
      Event
      {{/if}},
      Extract<
        Event,
        { type: 'done.invoke.{{this.name}}'}> extends { 'data': infer T } ? T : any
      > | StateMachine<any, any, any>
    {{/each}}
  };
  {{/if}}
  {{#if activities}}
  activities: {
    {{#each activities}}    
    {{this}}: ActivityConfig<Context, Event>;
    {{/each}}
  };
  {{/if}}
  devTools?: boolean;
}

export type {{ capitalize id}}State<Context, Event extends EventObject> = Omit<State<Context, Event>, 'matches'> & {
    matches: (match: {{ capitalize id }}StateMatches) => boolean;
  }

export const use{{ capitalize id }} = <
  Context = any,
  StateSchema = any,
  Event extends EventObject = AnyEventObject
>(
  machine: StateMachine<Context, StateSchema, Event>,
  options: {{ capitalize id }}Options<Context, Event>,
): [
  {{ capitalize id}}State<Context, Event>,
  Interpreter<Context, StateSchema, Event>['send'],
  Interpreter<Context, StateSchema, Event>,
] => {
  return useMachine(machine as any, options as any) as any;
};