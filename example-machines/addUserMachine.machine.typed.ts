// This file is auto-generated by a CLI tool
// Ask @mattpocock about it

import { useMachine } from '@xstate/react';
import {
  StateMachine,
  AnyEventObject,
  EventObject,
  State,
  Interpreter,
  InvokeCreator,
} from 'xstate';

export type AddUserMachineStateMatches = 'idle' | 'cancelled' | 'errored';

export interface AddUserMachineOptions<
  Context = any,
  Event extends EventObject = AnyEventObject
> {
  context?: Partial<Context>;
  services: {
    something:
      | InvokeCreator<
          Context,
          Extract<Event, { type: 'done.invoke.something' }>,
          Extract<Event, { type: 'done.invoke.something' }> extends {
            data: infer T;
          }
            ? T
            : any
        >
      | StateMachine<any, any, any>;
  };
  devTools?: boolean;
}

export type AddUserMachineState<Context, Event extends EventObject> = Omit<
  State<Context, Event>,
  'matches'
> & {
  matches: (match: AddUserMachineStateMatches) => boolean;
};

export const useAddUserMachine = <
  Context = any,
  StateSchema = any,
  Event extends EventObject = AnyEventObject
>(
  machine: StateMachine<Context, StateSchema, Event>,
  options: AddUserMachineOptions<Context, Event>,
): [
  AddUserMachineState<Context, Event>,
  Interpreter<Context, StateSchema, Event>['send'],
  Interpreter<Context, StateSchema, Event>,
] => {
  return useMachine(machine as any, options as any) as any;
};
